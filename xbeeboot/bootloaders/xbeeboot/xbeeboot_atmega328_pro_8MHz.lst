
xbeeboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00007fde  00000472  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003de  00007c00  00007c00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  00000472  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00001470  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f3d  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002821  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007c00 <main>:
    7c00:	1f 92       	push	r1
    7c02:	cd b7       	in	r28, 0x3d	; 61
    7c04:	de b7       	in	r29, 0x3e	; 62
    7c06:	11 24       	eor	r1, r1
    7c08:	84 b7       	in	r24, 0x34	; 52
    7c0a:	14 be       	out	0x34, r1	; 52
    7c0c:	98 2f       	mov	r25, r24
    7c0e:	9d 70       	andi	r25, 0x0D	; 13
    7c10:	09 f0       	breq	.+2      	; 0x7c14 <main+0x14>
    7c12:	d9 d1       	rcall	.+946    	; 0x7fc6 <appStart>
    7c14:	82 e0       	ldi	r24, 0x02	; 2
    7c16:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7c1a:	88 e1       	ldi	r24, 0x18	; 24
    7c1c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    7c20:	86 e0       	ldi	r24, 0x06	; 6
    7c22:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    7c26:	87 e6       	ldi	r24, 0x67	; 103
    7c28:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    7c2c:	89 e2       	ldi	r24, 0x29	; 41
    7c2e:	b6 d1       	rcall	.+876    	; 0x7f9c <watchdogConfig>
    7c30:	8e ef       	ldi	r24, 0xFE	; 254
    7c32:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <_edata+0x182>
    7c36:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <_edata+0x181>
    7c3a:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <_edata+0x180>
    7c3e:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <_edata+0x183>
    7c42:	81 2c       	mov	r8, r1
    7c44:	91 2c       	mov	r9, r1
    7c46:	93 e0       	ldi	r25, 0x03	; 3
    7c48:	f9 2e       	mov	r15, r25
    7c4a:	ee 24       	eor	r14, r14
    7c4c:	e3 94       	inc	r14
    7c4e:	25 e0       	ldi	r18, 0x05	; 5
    7c50:	d2 2e       	mov	r13, r18
    7c52:	31 e1       	ldi	r19, 0x11	; 17
    7c54:	c3 2e       	mov	r12, r19
    7c56:	7d d1       	rcall	.+762    	; 0x7f52 <getch>
    7c58:	81 34       	cpi	r24, 0x41	; 65
    7c5a:	79 f4       	brne	.+30     	; 0x7c7a <main+0x7a>
    7c5c:	7a d1       	rcall	.+756    	; 0x7f52 <getch>
    7c5e:	89 83       	std	Y+1, r24	; 0x01
    7c60:	a3 d1       	rcall	.+838    	; 0x7fa8 <verifySpace>
    7c62:	89 81       	ldd	r24, Y+1	; 0x01
    7c64:	82 38       	cpi	r24, 0x82	; 130
    7c66:	11 f4       	brne	.+4      	; 0x7c6c <main+0x6c>
    7c68:	82 e0       	ldi	r24, 0x02	; 2
    7c6a:	05 c0       	rjmp	.+10     	; 0x7c76 <main+0x76>
    7c6c:	81 38       	cpi	r24, 0x81	; 129
    7c6e:	11 f4       	brne	.+4      	; 0x7c74 <main+0x74>
    7c70:	86 e0       	ldi	r24, 0x06	; 6
    7c72:	01 c0       	rjmp	.+2      	; 0x7c76 <main+0x76>
    7c74:	83 e0       	ldi	r24, 0x03	; 3
    7c76:	5c d1       	rcall	.+696    	; 0x7f30 <putch>
    7c78:	6c c0       	rjmp	.+216    	; 0x7d52 <main+0x152>
    7c7a:	82 34       	cpi	r24, 0x42	; 66
    7c7c:	11 f4       	brne	.+4      	; 0x7c82 <main+0x82>
    7c7e:	84 e1       	ldi	r24, 0x14	; 20
    7c80:	03 c0       	rjmp	.+6      	; 0x7c88 <main+0x88>
    7c82:	85 34       	cpi	r24, 0x45	; 69
    7c84:	19 f4       	brne	.+6      	; 0x7c8c <main+0x8c>
    7c86:	85 e0       	ldi	r24, 0x05	; 5
    7c88:	97 d1       	rcall	.+814    	; 0x7fb8 <getNch>
    7c8a:	63 c0       	rjmp	.+198    	; 0x7d52 <main+0x152>
    7c8c:	85 35       	cpi	r24, 0x55	; 85
    7c8e:	41 f4       	brne	.+16     	; 0x7ca0 <main+0xa0>
    7c90:	60 d1       	rcall	.+704    	; 0x7f52 <getch>
    7c92:	88 2e       	mov	r8, r24
    7c94:	5e d1       	rcall	.+700    	; 0x7f52 <getch>
    7c96:	91 2c       	mov	r9, r1
    7c98:	98 2a       	or	r9, r24
    7c9a:	88 0c       	add	r8, r8
    7c9c:	99 1c       	adc	r9, r9
    7c9e:	58 c0       	rjmp	.+176    	; 0x7d50 <main+0x150>
    7ca0:	86 35       	cpi	r24, 0x56	; 86
    7ca2:	21 f4       	brne	.+8      	; 0x7cac <main+0xac>
    7ca4:	84 e0       	ldi	r24, 0x04	; 4
    7ca6:	88 d1       	rcall	.+784    	; 0x7fb8 <getNch>
    7ca8:	80 e0       	ldi	r24, 0x00	; 0
    7caa:	e5 cf       	rjmp	.-54     	; 0x7c76 <main+0x76>
    7cac:	84 36       	cpi	r24, 0x64	; 100
    7cae:	09 f0       	breq	.+2      	; 0x7cb2 <main+0xb2>
    7cb0:	36 c0       	rjmp	.+108    	; 0x7d1e <main+0x11e>
    7cb2:	4f d1       	rcall	.+670    	; 0x7f52 <getch>
    7cb4:	4e d1       	rcall	.+668    	; 0x7f52 <getch>
    7cb6:	b8 2e       	mov	r11, r24
    7cb8:	4c d1       	rcall	.+664    	; 0x7f52 <getch>
    7cba:	a8 2e       	mov	r10, r24
    7cbc:	00 e0       	ldi	r16, 0x00	; 0
    7cbe:	11 e0       	ldi	r17, 0x01	; 1
    7cc0:	48 d1       	rcall	.+656    	; 0x7f52 <getch>
    7cc2:	f8 01       	movw	r30, r16
    7cc4:	81 93       	st	Z+, r24
    7cc6:	8f 01       	movw	r16, r30
    7cc8:	be 12       	cpse	r11, r30
    7cca:	fa cf       	rjmp	.-12     	; 0x7cc0 <main+0xc0>
    7ccc:	6d d1       	rcall	.+730    	; 0x7fa8 <verifySpace>
    7cce:	f5 e4       	ldi	r31, 0x45	; 69
    7cd0:	af 12       	cpse	r10, r31
    7cd2:	01 c0       	rjmp	.+2      	; 0x7cd6 <main+0xd6>
    7cd4:	ff cf       	rjmp	.-2      	; 0x7cd4 <main+0xd4>
    7cd6:	f4 01       	movw	r30, r8
    7cd8:	f7 be       	out	0x37, r15	; 55
    7cda:	e8 95       	spm
    7cdc:	07 b6       	in	r0, 0x37	; 55
    7cde:	00 fc       	sbrc	r0, 0
    7ce0:	fd cf       	rjmp	.-6      	; 0x7cdc <main+0xdc>
    7ce2:	b4 01       	movw	r22, r8
    7ce4:	a0 e0       	ldi	r26, 0x00	; 0
    7ce6:	b1 e0       	ldi	r27, 0x01	; 1
    7ce8:	2c 91       	ld	r18, X
    7cea:	12 96       	adiw	r26, 0x02	; 2
    7cec:	ad 01       	movw	r20, r26
    7cee:	41 50       	subi	r20, 0x01	; 1
    7cf0:	51 09       	sbc	r21, r1
    7cf2:	fa 01       	movw	r30, r20
    7cf4:	80 81       	ld	r24, Z
    7cf6:	30 e0       	ldi	r19, 0x00	; 0
    7cf8:	38 2b       	or	r19, r24
    7cfa:	fb 01       	movw	r30, r22
    7cfc:	09 01       	movw	r0, r18
    7cfe:	e7 be       	out	0x37, r14	; 55
    7d00:	e8 95       	spm
    7d02:	11 24       	eor	r1, r1
    7d04:	6e 5f       	subi	r22, 0xFE	; 254
    7d06:	7f 4f       	sbci	r23, 0xFF	; 255
    7d08:	ba 12       	cpse	r11, r26
    7d0a:	ee cf       	rjmp	.-36     	; 0x7ce8 <main+0xe8>
    7d0c:	f4 01       	movw	r30, r8
    7d0e:	d7 be       	out	0x37, r13	; 55
    7d10:	e8 95       	spm
    7d12:	07 b6       	in	r0, 0x37	; 55
    7d14:	00 fc       	sbrc	r0, 0
    7d16:	fd cf       	rjmp	.-6      	; 0x7d12 <main+0x112>
    7d18:	c7 be       	out	0x37, r12	; 55
    7d1a:	e8 95       	spm
    7d1c:	1a c0       	rjmp	.+52     	; 0x7d52 <main+0x152>
    7d1e:	84 37       	cpi	r24, 0x74	; 116
    7d20:	71 f4       	brne	.+28     	; 0x7d3e <main+0x13e>
    7d22:	17 d1       	rcall	.+558    	; 0x7f52 <getch>
    7d24:	16 d1       	rcall	.+556    	; 0x7f52 <getch>
    7d26:	b8 2e       	mov	r11, r24
    7d28:	14 d1       	rcall	.+552    	; 0x7f52 <getch>
    7d2a:	3e d1       	rcall	.+636    	; 0x7fa8 <verifySpace>
    7d2c:	84 01       	movw	r16, r8
    7d2e:	f8 01       	movw	r30, r16
    7d30:	85 91       	lpm	r24, Z+
    7d32:	8f 01       	movw	r16, r30
    7d34:	fd d0       	rcall	.+506    	; 0x7f30 <putch>
    7d36:	ba 94       	dec	r11
    7d38:	b1 10       	cpse	r11, r1
    7d3a:	f9 cf       	rjmp	.-14     	; 0x7d2e <main+0x12e>
    7d3c:	0a c0       	rjmp	.+20     	; 0x7d52 <main+0x152>
    7d3e:	85 37       	cpi	r24, 0x75	; 117
    7d40:	39 f4       	brne	.+14     	; 0x7d50 <main+0x150>
    7d42:	32 d1       	rcall	.+612    	; 0x7fa8 <verifySpace>
    7d44:	8e e1       	ldi	r24, 0x1E	; 30
    7d46:	f4 d0       	rcall	.+488    	; 0x7f30 <putch>
    7d48:	85 e9       	ldi	r24, 0x95	; 149
    7d4a:	f2 d0       	rcall	.+484    	; 0x7f30 <putch>
    7d4c:	8f e0       	ldi	r24, 0x0F	; 15
    7d4e:	93 cf       	rjmp	.-218    	; 0x7c76 <main+0x76>
    7d50:	2b d1       	rcall	.+598    	; 0x7fa8 <verifySpace>
    7d52:	80 e1       	ldi	r24, 0x10	; 16
    7d54:	ed d0       	rcall	.+474    	; 0x7f30 <putch>
    7d56:	7f cf       	rjmp	.-258    	; 0x7c56 <main+0x56>

00007d58 <uartPutch>:
  }
}

void uartPutch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    7d58:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7d5c:	95 ff       	sbrs	r25, 5
    7d5e:	fc cf       	rjmp	.-8      	; 0x7d58 <uartPutch>
  UART_UDR = ch;
    7d60:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    7d64:	08 95       	ret

00007d66 <escPutch>:
  if (ch != 0x7d)
    return ch;
  return 0x20 ^ uartGetch();
}

static void escPutch(char ch) {
    7d66:	cf 93       	push	r28
    7d68:	c8 2f       	mov	r28, r24
  //if (ch >= 0x7d || (uint8_t)ch <= 0x13) {
  if (ch == 0x7d || ch == 0x7e || ch == 0x11 || ch == 0x13) {
    7d6a:	83 e8       	ldi	r24, 0x83	; 131
    7d6c:	8c 0f       	add	r24, r28
    7d6e:	82 30       	cpi	r24, 0x02	; 2
    7d70:	20 f0       	brcs	.+8      	; 0x7d7a <escPutch+0x14>
    7d72:	8c 2f       	mov	r24, r28
    7d74:	8d 7f       	andi	r24, 0xFD	; 253
    7d76:	81 31       	cpi	r24, 0x11	; 17
    7d78:	21 f4       	brne	.+8      	; 0x7d82 <escPutch+0x1c>
    uartPutch(0x7d);
    7d7a:	8d e7       	ldi	r24, 0x7D	; 125
    7d7c:	ed df       	rcall	.-38     	; 0x7d58 <uartPutch>
    ch ^= 0x20;
    7d7e:	80 e2       	ldi	r24, 0x20	; 32
    7d80:	c8 27       	eor	r28, r24
  }
  uartPutch(ch);
    7d82:	8c 2f       	mov	r24, r28
}
    7d84:	cf 91       	pop	r28
  uartPutch(ch);
    7d86:	e8 cf       	rjmp	.-48     	; 0x7d58 <uartPutch>

00007d88 <transmit>:

#define TXHEADER_BYTES 14
static __attribute__((__noinline__))
void transmit(const uint8_t length) {
    7d88:	0f 93       	push	r16
    7d8a:	1f 93       	push	r17
    7d8c:	cf 93       	push	r28
    7d8e:	df 93       	push	r29
    7d90:	08 2f       	mov	r16, r24
#define XBEE_BROADCAST_RADIUS 0
#define XBEE_TX_OPTIONS 0
  outputBuffer[0] = 0x10; /* ZigBee Transmit Request */
    7d92:	80 e1       	ldi	r24, 0x10	; 16
    7d94:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <_edata+0x300>
  outputBuffer[1] = 0; /* Delivery sequence */
    7d98:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <_edata+0x301>
  /* outputBuffer[2..11] = lastAddress */
  outputBuffer[12] = XBEE_BROADCAST_RADIUS; /* Broadcast radius */
    7d9c:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <_edata+0x30c>
  outputBuffer[13] = XBEE_TX_OPTIONS; /* Options */
    7da0:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <_edata+0x30d>

  uartPutch(0x7e);
    7da4:	8e e7       	ldi	r24, 0x7E	; 126
  escPutch(0); /* Length MSB */
    7da6:	d8 df       	rcall	.-80     	; 0x7d58 <uartPutch>
    7da8:	80 e0       	ldi	r24, 0x00	; 0
  escPutch(length); /* Length LSB */
    7daa:	dd df       	rcall	.-70     	; 0x7d66 <escPutch>
    7dac:	80 2f       	mov	r24, r16
    7dae:	db df       	rcall	.-74     	; 0x7d66 <escPutch>

  uint8_t checksum = 0xff;
  uint8_t index;
  for (index = 0; index < length; index++) {
    7db0:	c0 e0       	ldi	r28, 0x00	; 0
    7db2:	d4 e0       	ldi	r29, 0x04	; 4
  uint8_t checksum = 0xff;
    7db4:	1f ef       	ldi	r17, 0xFF	; 255
  for (index = 0; index < length; index++) {
    7db6:	c0 17       	cp	r28, r16
    7db8:	20 f4       	brcc	.+8      	; 0x7dc2 <transmit+0x3a>
    const uint8_t val = outputBuffer[index];
    checksum -= val;
    7dba:	89 91       	ld	r24, Y+
    escPutch(val);
    7dbc:	18 1b       	sub	r17, r24
    7dbe:	d3 df       	rcall	.-90     	; 0x7d66 <escPutch>
    7dc0:	fa cf       	rjmp	.-12     	; 0x7db6 <transmit+0x2e>
  }

  escPutch(checksum);
    7dc2:	81 2f       	mov	r24, r17
}
    7dc4:	df 91       	pop	r29
    7dc6:	cf 91       	pop	r28
    7dc8:	1f 91       	pop	r17
  escPutch(checksum);
    7dca:	0f 91       	pop	r16
    7dcc:	cc cf       	rjmp	.-104    	; 0x7d66 <escPutch>

00007dce <uartGetch>:
  while(!(UART_SRA & _BV(RXC0)))
    7dce:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7dd2:	87 ff       	sbrs	r24, 7
    7dd4:	fc cf       	rjmp	.-8      	; 0x7dce <uartGetch>
  if (!(UART_SRA & _BV(FE0))) {
    7dd6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7dda:	84 fd       	sbrc	r24, 4
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7ddc:	01 c0       	rjmp	.+2      	; 0x7de0 <uartGetch+0x12>
  ch = UART_UDR;
    7dde:	a8 95       	wdr
}
    7de0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    7de4:	08 95       	ret

00007de6 <escGetch>:
  const uint8_t ch = uartGetch();
    7de6:	f3 df       	rcall	.-26     	; 0x7dce <uartGetch>
    7de8:	8d 37       	cpi	r24, 0x7D	; 125
  if (ch != 0x7d)
    7dea:	21 f4       	brne	.+8      	; 0x7df4 <escGetch+0xe>
    7dec:	f0 df       	rcall	.-32     	; 0x7dce <uartGetch>
  return 0x20 ^ uartGetch();
    7dee:	90 e2       	ldi	r25, 0x20	; 32
    7df0:	98 27       	eor	r25, r24
    7df2:	01 c0       	rjmp	.+2      	; 0x7df6 <escGetch+0x10>
    7df4:	98 2f       	mov	r25, r24
    7df6:	89 2f       	mov	r24, r25
    7df8:	08 95       	ret

00007dfa <poll>:
uint8_t poll(uint8_t waitForAck) {
    7dfa:	ef 92       	push	r14
    7dfc:	ff 92       	push	r15
    7dfe:	0f 93       	push	r16
    7e00:	1f 93       	push	r17
    7e02:	cf 93       	push	r28
  register uint8_t sawInvalid = 0;
    7e04:	df 93       	push	r29
    if (uartGetch() != 0x7e)
    7e06:	f8 2e       	mov	r15, r24
    7e08:	10 e0       	ldi	r17, 0x00	; 0
    7e0a:	e1 df       	rcall	.-62     	; 0x7dce <uartGetch>
    7e0c:	8e 37       	cpi	r24, 0x7E	; 126
    if (escGetch() != 0)
    7e0e:	e9 f7       	brne	.-6      	; 0x7e0a <poll+0x10>
    7e10:	ea df       	rcall	.-44     	; 0x7de6 <escGetch>
    7e12:	81 11       	cpse	r24, r1
    7e14:	fa cf       	rjmp	.-12     	; 0x7e0a <poll+0x10>
    const uint8_t length = escGetch();
    7e16:	e7 df       	rcall	.-50     	; 0x7de6 <escGetch>
    7e18:	08 2f       	mov	r16, r24
    for (index = 0; index < length; index++) {
    7e1a:	c0 e8       	ldi	r28, 0x80	; 128
    7e1c:	d3 e0       	ldi	r29, 0x03	; 3
    register uint8_t checksum = 0xff;
    7e1e:	ee 24       	eor	r14, r14
    7e20:	ea 94       	dec	r14
    7e22:	8c 2f       	mov	r24, r28
    for (index = 0; index < length; index++) {
    7e24:	80 58       	subi	r24, 0x80	; 128
    7e26:	80 17       	cp	r24, r16
      uint8_t dataByte = escGetch();
    7e28:	20 f4       	brcc	.+8      	; 0x7e32 <poll+0x38>
    7e2a:	dd df       	rcall	.-70     	; 0x7de6 <escGetch>
      packet[index] = dataByte;
    7e2c:	89 93       	st	Y+, r24
      checksum -= dataByte;
    7e2e:	e8 1a       	sub	r14, r24
    7e30:	f8 cf       	rjmp	.-16     	; 0x7e22 <poll+0x28>
    if (checksum != escGetch())
    7e32:	d9 df       	rcall	.-78     	; 0x7de6 <escGetch>
    7e34:	e8 12       	cpse	r14, r24
    7e36:	e9 cf       	rjmp	.-46     	; 0x7e0a <poll+0x10>
    7e38:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <_edata+0x280>
    if (packet[0] != 0x90)
    7e3c:	80 39       	cpi	r24, 0x90	; 144
    7e3e:	29 f7       	brne	.-54     	; 0x7e0a <poll+0x10>
    7e40:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <_edata+0x28c>
    const uint8_t packetType = packet[PACKOFF_PAYLOAD];
    7e44:	c0 91 8d 03 	lds	r28, 0x038D	; 0x80038d <_edata+0x28d>
    const uint8_t sequence = packet[PACKOFF_PAYLOAD + 1];
    7e48:	0e 30       	cpi	r16, 0x0E	; 14
    if (length == PACKOFF_PAYLOAD + 2) {
    7e4a:	61 f4       	brne	.+24     	; 0x7e64 <poll+0x6a>
    7e4c:	ff 20       	and	r15, r15
      if (!waitForAck)
    7e4e:	e9 f2       	breq	.-70     	; 0x7e0a <poll+0x10>
    7e50:	81 11       	cpse	r24, r1
      if (packetType != 0)
    7e52:	db cf       	rjmp	.-74     	; 0x7e0a <poll+0x10>
    7e54:	fc 12       	cpse	r15, r28
      if (waitForAck == sequence)
    7e56:	02 c0       	rjmp	.+4      	; 0x7e5c <poll+0x62>
    7e58:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
    7e5a:	40 c0       	rjmp	.+128    	; 0x7edc <poll+0xe2>
    7e5c:	11 11       	cpse	r17, r1
      if (sawInvalid++)
    7e5e:	3d c0       	rjmp	.+122    	; 0x7eda <poll+0xe0>
    7e60:	11 e0       	ldi	r17, 0x01	; 1
uint8_t poll(uint8_t waitForAck) {
    7e62:	d3 cf       	rjmp	.-90     	; 0x7e0a <poll+0x10>
    7e64:	00 31       	cpi	r16, 0x10	; 16
    } else if (length >= PACKOFF_PAYLOAD + 4) {
    7e66:	88 f2       	brcs	.-94     	; 0x7e0a <poll+0x10>
    7e68:	81 30       	cpi	r24, 0x01	; 1
      if (packetType != 1)
    7e6a:	79 f6       	brne	.-98     	; 0x7e0a <poll+0x10>
    7e6c:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <_edata+0x28e>
      if (type != 23)
    7e70:	87 31       	cpi	r24, 0x17	; 23
    7e72:	59 f6       	brne	.-106    	; 0x7e0a <poll+0x10>
    7e74:	a2 e0       	ldi	r26, 0x02	; 2
    7e76:	b4 e0       	ldi	r27, 0x04	; 4
    7e78:	e1 e8       	ldi	r30, 0x81	; 129
    7e7a:	f3 e0       	ldi	r31, 0x03	; 3
    7e7c:	81 91       	ld	r24, Z+
          lastAddress[index] = packet[PACKOFF_ADDRESS + index];
    7e7e:	8d 93       	st	X+, r24
    7e80:	eb 38       	cpi	r30, 0x8B	; 139
        for (index = 0; index < 10; index++)
    7e82:	83 e0       	ldi	r24, 0x03	; 3
    7e84:	f8 07       	cpc	r31, r24
    7e86:	d1 f7       	brne	.-12     	; 0x7e7c <poll+0x82>
    7e88:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <_edata+0x180>
      uint8_t nextSequence = lastSequence;
    7e8c:	98 2f       	mov	r25, r24
      while ((++nextSequence & 0xff) == 0);
    7e8e:	9f 5f       	subi	r25, 0xFF	; 255
    7e90:	f1 f3       	breq	.-4      	; 0x7e8e <poll+0x94>
      if (sequence != nextSequence) {
    7e92:	c9 17       	cp	r28, r25
    7e94:	29 f0       	breq	.+10     	; 0x7ea0 <poll+0xa6>
        if (sawInvalid++)
    7e96:	11 23       	and	r17, r17
    7e98:	19 f3       	breq	.-58     	; 0x7e60 <poll+0x66>
    7e9a:	1f 5f       	subi	r17, 0xFF	; 255
          sendAck(lastSequence);
    7e9c:	9a d0       	rcall	.+308    	; 0x7fd2 <sendAck>
    7e9e:	b5 cf       	rjmp	.-150    	; 0x7e0a <poll+0x10>
    7ea0:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <_edata+0x182>
      if (frameMode != FRAME_FRAME)
    7ea4:	81 11       	cpse	r24, r1
    7ea6:	b1 cf       	rjmp	.-158    	; 0x7e0a <poll+0x10>
    7ea8:	0f 50       	subi	r16, 0x0F	; 15
        uint8_t dataLength = length - PACKOFF_PAYLOAD - 3;
    7eaa:	ef e8       	ldi	r30, 0x8F	; 143
    7eac:	f3 e0       	ldi	r31, 0x03	; 3
    7eae:	20 2f       	mov	r18, r16
    7eb0:	30 e0       	ldi	r19, 0x00	; 0
    7eb2:	21 57       	subi	r18, 0x71	; 113
    7eb4:	39 4f       	sbci	r19, 0xF9	; 249
    7eb6:	81 91       	ld	r24, Z+
            packet[PACKOFF_PAYLOAD + 3 + index];
    7eb8:	d9 01       	movw	r26, r18
    7eba:	ae 1b       	sub	r26, r30
    7ebc:	bf 0b       	sbc	r27, r31
          packetBuffer[dataLength - 1 - index] =
    7ebe:	8c 93       	st	X, r24
    7ec0:	81 e7       	ldi	r24, 0x71	; 113
    7ec2:	8e 0f       	add	r24, r30
        for (index = 0; index < dataLength; index++)
    7ec4:	80 17       	cp	r24, r16
    7ec6:	b8 f3       	brcs	.-18     	; 0x7eb6 <poll+0xbc>
        frameMode = dataLength;
    7ec8:	00 93 82 02 	sts	0x0282, r16	; 0x800282 <_edata+0x182>
      sendAck(nextSequence);
    7ecc:	8c 2f       	mov	r24, r28
    7ece:	81 d0       	rcall	.+258    	; 0x7fd2 <sendAck>
    7ed0:	c0 93 80 02 	sts	0x0280, r28	; 0x800280 <_edata+0x180>
      lastIncomingSequence = nextSequence;
    7ed4:	f1 10       	cpse	r15, r1
      if (!waitForAck) {
    7ed6:	99 cf       	rjmp	.-206    	; 0x7e0a <poll+0x10>
    7ed8:	bf cf       	rjmp	.-130    	; 0x7e58 <poll+0x5e>
    7eda:	81 e0       	ldi	r24, 0x01	; 1
        return 1;
    7edc:	df 91       	pop	r29
}
    7ede:	cf 91       	pop	r28
    7ee0:	1f 91       	pop	r17
    7ee2:	0f 91       	pop	r16
    7ee4:	ff 90       	pop	r15
    7ee6:	ef 90       	pop	r14
    7ee8:	08 95       	ret

00007eea <pushBuffer>:
void pushBuffer(const uint8_t max) {
    7eea:	1f 93       	push	r17
    7eec:	cf 93       	push	r28
    7eee:	df 93       	push	r29
  if (outputIndex <= max)
    7ef0:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <_edata+0x183>
    7ef4:	89 17       	cp	r24, r25
    7ef6:	c0 f4       	brcc	.+48     	; 0x7f28 <pushBuffer+0x3e>
  uint8_t sequence = lastOutgoingSequence;
    7ef8:	c0 91 81 02 	lds	r28, 0x0281	; 0x800281 <_edata+0x181>
  while ((++sequence & 0xff) == 0);
    7efc:	cf 5f       	subi	r28, 0xFF	; 255
  lastOutgoingSequence = sequence;
    7efe:	f1 f3       	breq	.-4      	; 0x7efc <pushBuffer+0x12>
    outputPayload[0] = 1 /* REQUEST */;
    7f00:	c0 93 81 02 	sts	0x0281, r28	; 0x800281 <_edata+0x181>
    7f04:	11 e0       	ldi	r17, 0x01	; 1
    7f06:	d8 e1       	ldi	r29, 0x18	; 24
    outputPayload[1] = sequence;
    7f08:	10 93 0e 04 	sts	0x040E, r17	; 0x80040e <_edata+0x30e>
    outputPayload[2] = 24 /* FIRMWARE_REPLY */;
    7f0c:	c0 93 0f 04 	sts	0x040F, r28	; 0x80040f <_edata+0x30f>
    transmit(TXHEADER_BYTES + 3 + outputIndex);
    7f10:	d0 93 10 04 	sts	0x0410, r29	; 0x800410 <_edata+0x310>
    7f14:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <_edata+0x183>
  } while (poll(sequence));
    7f18:	8f 5e       	subi	r24, 0xEF	; 239
    7f1a:	36 df       	rcall	.-404    	; 0x7d88 <transmit>
    7f1c:	8c 2f       	mov	r24, r28
    7f1e:	6d df       	rcall	.-294    	; 0x7dfa <poll>
    7f20:	81 11       	cpse	r24, r1
  outputIndex = 0;
    7f22:	f2 cf       	rjmp	.-28     	; 0x7f08 <pushBuffer+0x1e>
    7f24:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <_edata+0x183>
}
    7f28:	df 91       	pop	r29
    7f2a:	cf 91       	pop	r28
    7f2c:	1f 91       	pop	r17
    7f2e:	08 95       	ret

00007f30 <putch>:
  if (frameMode == FRAME_UART) {
    7f30:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <_edata+0x182>
    7f34:	9d 3f       	cpi	r25, 0xFD	; 253
    uartPutch(ch);
    7f36:	09 f4       	brne	.+2      	; 0x7f3a <putch+0xa>
    7f38:	0f cf       	rjmp	.-482    	; 0x7d58 <uartPutch>
  outputText[outputIndex++] = ch;
    7f3a:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <_edata+0x183>
    7f3e:	91 e0       	ldi	r25, 0x01	; 1
    7f40:	9e 0f       	add	r25, r30
    7f42:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <_edata+0x183>
    7f46:	f0 e0       	ldi	r31, 0x00	; 0
    7f48:	ef 5e       	subi	r30, 0xEF	; 239
  pushBuffer(64);
    7f4a:	fb 4f       	sbci	r31, 0xFB	; 251
    7f4c:	80 83       	st	Z, r24
    7f4e:	80 e4       	ldi	r24, 0x40	; 64
    7f50:	cc cf       	rjmp	.-104    	; 0x7eea <pushBuffer>

00007f52 <getch>:
  pushBuffer(0);
    7f52:	80 e0       	ldi	r24, 0x00	; 0
    7f54:	ca df       	rcall	.-108    	; 0x7eea <pushBuffer>
    7f56:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <_edata+0x182>
  switch (frameMode) {
    7f5a:	8d 3f       	cpi	r24, 0xFD	; 253
    7f5c:	29 f0       	breq	.+10     	; 0x7f68 <getch+0x16>
    7f5e:	8e 3f       	cpi	r24, 0xFE	; 254
    7f60:	21 f0       	breq	.+8      	; 0x7f6a <getch+0x18>
    7f62:	81 11       	cpse	r24, r1
    7f64:	12 c0       	rjmp	.+36     	; 0x7f8a <getch+0x38>
    7f66:	0f c0       	rjmp	.+30     	; 0x7f86 <getch+0x34>
    return uartGetch();
    7f68:	32 cf       	rjmp	.-412    	; 0x7dce <uartGetch>
    7f6a:	31 df       	rcall	.-414    	; 0x7dce <uartGetch>
      uint8_t ch = uartGetch();
    7f6c:	8e 37       	cpi	r24, 0x7E	; 126
    7f6e:	49 f0       	breq	.+18     	; 0x7f82 <getch+0x30>
      switch (ch) {
    7f70:	80 39       	cpi	r24, 0x90	; 144
    7f72:	39 f0       	breq	.+14     	; 0x7f82 <getch+0x30>
    7f74:	80 33       	cpi	r24, 0x30	; 48
    7f76:	79 f7       	brne	.-34     	; 0x7f56 <getch+0x4>
    7f78:	8d ef       	ldi	r24, 0xFD	; 253
    7f7a:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <_edata+0x182>
        frameMode = FRAME_UART;
    7f7e:	80 e3       	ldi	r24, 0x30	; 48
      uint8_t ch = uartGetch();
    7f80:	08 95       	ret
        return ch;
    7f82:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <_edata+0x182>
        frameMode = FRAME_FRAME;
    7f86:	80 e0       	ldi	r24, 0x00	; 0
    poll(0);
    7f88:	38 df       	rcall	.-400    	; 0x7dfa <poll>
    7f8a:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <_edata+0x182>
    return packetBuffer[--frameMode];
    7f8e:	e1 50       	subi	r30, 0x01	; 1
    7f90:	e0 93 82 02 	sts	0x0282, r30	; 0x800282 <_edata+0x182>
    7f94:	f0 e0       	ldi	r31, 0x00	; 0
    7f96:	fd 5f       	subi	r31, 0xFD	; 253
}
    7f98:	80 81       	ld	r24, Z
    7f9a:	08 95       	ret

00007f9c <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7f9c:	e0 e6       	ldi	r30, 0x60	; 96
    7f9e:	f0 e0       	ldi	r31, 0x00	; 0
    7fa0:	98 e1       	ldi	r25, 0x18	; 24
    7fa2:	90 83       	st	Z, r25
  WDTCSR = x;
    7fa4:	80 83       	st	Z, r24
    7fa6:	08 95       	ret

00007fa8 <verifySpace>:
  if (getch() != CRC_EOP) {
    7fa8:	d4 df       	rcall	.-88     	; 0x7f52 <getch>
    7faa:	80 32       	cpi	r24, 0x20	; 32
    7fac:	19 f0       	breq	.+6      	; 0x7fb4 <verifySpace+0xc>
    7fae:	88 e0       	ldi	r24, 0x08	; 8
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7fb0:	f5 df       	rcall	.-22     	; 0x7f9c <watchdogConfig>
    7fb2:	ff cf       	rjmp	.-2      	; 0x7fb2 <verifySpace+0xa>
    7fb4:	84 e1       	ldi	r24, 0x14	; 20
    7fb6:	bc cf       	rjmp	.-136    	; 0x7f30 <putch>

00007fb8 <getNch>:
void getNch(uint8_t count) {
    7fb8:	cf 93       	push	r28
    7fba:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7fbc:	ca df       	rcall	.-108    	; 0x7f52 <getch>
    7fbe:	c1 50       	subi	r28, 0x01	; 1
    7fc0:	e9 f7       	brne	.-6      	; 0x7fbc <getNch+0x4>
    7fc2:	cf 91       	pop	r28
}
    7fc4:	f1 cf       	rjmp	.-30     	; 0x7fa8 <verifySpace>

00007fc6 <appStart>:
    7fc6:	28 2e       	mov	r2, r24
    7fc8:	80 e0       	ldi	r24, 0x00	; 0
    7fca:	e8 df       	rcall	.-48     	; 0x7f9c <watchdogConfig>
    7fcc:	e0 e0       	ldi	r30, 0x00	; 0
    7fce:	ff 27       	eor	r31, r31
    7fd0:	09 94       	ijmp

00007fd2 <sendAck>:
  outputPayload[0] = 0 /* ACK */;
    7fd2:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <_edata+0x30e>
  outputPayload[1] = sequence;
    7fd6:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <_edata+0x30f>
  transmit(TXHEADER_BYTES + 2);
    7fda:	80 e1       	ldi	r24, 0x10	; 16
    7fdc:	d5 ce       	rjmp	.-598    	; 0x7d88 <transmit>
